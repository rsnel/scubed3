Copyright
~~~~~~~~~

GPL v3 or (at your option) any later version
This program includes the Mersenne Twister implementation of Geoff Kuenning,
see mtwist.*, the license of those files is LGPL v2 or (at your option) any
later version.


Terminoloy
~~~~~~~~~~

base device: this file/device/database holds all macroblocks, our worst case
threat-model assumes an adversary can make snapshots of it at will

scubed3 partition: a block device whose contents are managed by a scubed3
deamon, writing to a scubed3 partition causes changes to the macroblocks in the base device

macroblocks: the smallest bit of information to someone who doesn't have the
cryptographic key corresponding to it, a macroblock will either change randomly
(each bit changes with a probability of .5) or not at all

mesoblock: in a macroblock a series of mesoblocks are stored, along with
information on where the mesoblock belongs on the scubed3 partition.

indexblock: the first mesoblock in each macroblock contains information
about the other mesoblocks in said macroblock


Threat model
~~~~~~~~~~~~

The adversary has full knowledge about the macroblocks (including history) and
may even have write access to them. This adversary may have keys to some
scubed3 partitions. The goal is to be able to plausibly deny the existance of
partitions to which the adversary has no keys.  Only paranoia level 3 protects
completely against this. We assume the adversary cannot detect read access.


Paranoia levels
~~~~~~~~~~~~~~~

When a new macroblock needs to be selected:

Level 0: not paranoid

it is selected from all allocated blocks based on it's emptyness, the most
empty block gets selected.

Level 1: moderately paranoid

it is randomly selected from all allocated blocks. This hurts write
performance.

Level 2: just paranoid

a random block of the device is selected. If it happens to be allocated to the
current device, it is used. If it happens to be allocated to another device, it
is updated with a new seqno (therefore every bit will change with a probalility
of .5). If the block is unallocated, it will be added to the device, another
block will be deleted. (this level of paranoia is required for flash media,
this kind of media keeps an internal record about the order in whichs blocks
are written to it) It is only safe if all scubed3 devices are known to and
(if active) managed by the scubed3 deamon managing the current device.

[implemented as: select device (weighted by size), and write a random block]

Level 3: extremely paranoid

while active, the daemon writes blocks to random locations at regular intervals
to hide any real activity, this severely hurts performance. Considerations
of level 2 apply. It will wear out your flash very efficiently.


How to start
~~~~~~~~~~~~

You need to provide a set of macroblocks to scubed3, to which it has read/write
access. Normally this is either a file or a block device, but it may be
anything. (you would, however, need to write a custom blockio_init_* function
and provide read, write and close methods to it)


Control protocol
~~~~~~~~~~~~~~~~

/MOUNTPOINT/.control is a file to which commands can be written, and
scubed3's response can be read. A command is a line of text terminated
with a linefeed '\n'.

A response starts with "OK\n", or "ERR\n". One or more lines follow.
The last line must be ".\n". This terminates the message.

Commands:

- status

shows the status

- open NAME MODE KEY

opens a scubed partition

* NAME is the name, like root or swap, whatever, the name has no real meaning,
you can open any partition under any name

* MODE is the ciphermode, eg CBC_LARGE(AES), ABL4(SERPENT256).

* KEY is the cipher key bas16 encoded (hex).

- resize NAME MACROBLOCKS

resizes a scubed partition

* NAME ....

* MACROBLOCKS, the amount of macroblocks owned by the partition


Example calculation if indexblock size
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Suppose the device consists of 10 macroblocks. To not to overwrite the current
rivision while writing the new rivision when, in addition, writing random
blocks. A certain amount of wiggleroom has to be taken into account. Calculations
in 'testing/' point to the the following conjecture:

	If a device consists of n macroblocks, the maximum number of usable
	macroblocks is about 1/4th of n. To be safe, the system default is
	floor(1/4n).

To be efficient, some more space needs to be wasted, this is specified in
reserved_blocks.

For this example we assume the following. Macroblock size 4MB (m). Mesoblock
size 16kB (s). So, there are 256 mesoblocks per macroblock. Mesoblock
0 is the indexblock, the other ones are data blocks.

Whatever values are used, the indexblock MUST fit in one mesoblock! Required
size of the indexblock depends on the maximum amount of macroblocks scubed3 can
support (the size of a backing device can change, so scubed3 should be able to
deal with it, up to a maximum size).

The useful size of the device is
	(1<<(macroblock_log - mesoblock_log) - 1)(simultaneous_blocks - reserved_blocks)

Note that the usable size is limited by 2^32*(1<<mesoblock_log), because the device is partitioned
in mesoblocks, and we have 32 bits available to index the mesoblocks.

Layout of macroblock:

0x000000 SHA256_HASH_INDEXBLOCK
0x000020 SHA256_HASH_DATA (hash of ciphertext)
0x000040 uint64_t seqno
0x000048 8byte literal "scubed3-"
0x000050 4byte BCD version "0000"
0x000054 uint32_t obsoleted_by (if DATA, number of macroblock, otherwise 0xffffffff)
0x000058 uint32_t simultaneous_blocks
0x00005C uint32_t reserved_blocks
0x000060 uint32_t no_indices
0x000064 uint32_t idx0x01
0x000068 uint32_t idx0x02
......
0x00045C uint32_t idx0xff
0x000460 bitmap: each bit represents a macroblock of the base device
		 0 this block is not allocated to us
		 1 this block is allocated to us
0x003FFF last 8 bits of bitmap
0x004000 mesoblock1
0x008000 mesoblock2
0x00C000 mesoblock3
........
0x3FC000 mesoblock255
0x400000 end

There is space to index 0x4000 - 0x0460 = 0x3BA0 = 15264 bytes,
which corresponds to a base device size of 15240*8 = 122112 macroblocks,
which correspond to 4MiB * 122112 = 477GiB

Maximum usable size of the device is 2^32*(1<<mesoblock_log) = 64TiB, which is
sufficient in the light of the maximum size of the backing device.


In general the indexblock requires:
- fixed size: 96 bytes
- 4 bytes for every mesoblock in a macroblock
- 1 bit for every macroblock

Random blockselection
~~~~~~~~~~~~~~~~~~~~~

How to randomly select blocks and assign roles to them?

In this example, we use 6 macroblocks, each write a group of 3 blocks needs to
be preserved (as can be seen in testing/, this is not possible (if you try it,
every block will be marked as filler)), but it leads to a nice example that
illustrates the recursive workings of the algorithm.

Randomly select blocks to write is easy; just use an RNG. But how to select
roles? We must do it in such a way, that after every write the group of 2
blocks (that contain the state of the scubed3 device) are preserved.

Suppose we have the random numbers 20312015..

The algorithm works as follows. The the first random number, mark the block as used
on de disk as a DATA block. Take the next random number:
- if we overwrite an old data block, a filler block or an empty block, just continue
- if we overwrite a data block that is not old enough, backtrack to that block,
  mark it as filler and then revisit all blocks between the old block and the current block
  (revisiting: because we lost a data block, we have to check that new data blocks
  do not overwrite data blocks that are too young, if we overwrite a block that is too young,
  backtrack and mark that block as filler etc....)


step  | disk   | rng output | commentary
      | 012345 | 20312015.. |
---------------------------------------------------------------------
0     |   0    | 0          | use empty #2 as DATA0
1     | 1 0    | 01         | use empty #0 as DATA1
2     | 1 02   | 012        | use empty #3 as DATA2
3     | 1302   | 0123 	    | use empty #1 as DATA3
4     | 1342   | 01234      | overwrite DATA0 at #2 with DATA4
5     | 5342   | 012345     | overwrite DATA1 at #0 with DATA5
6     | 5*42   | 012345*    | conflict at #1 with DATA3, rewind to 3
6.3   | 1-02   | 012-       |  mark #1 as FILLER
6.4   | 1-*2   | 012-*      |  conflict at #2 with DATA0, rewind to 0
6.4.0 |   -    | -          |   mark #1 as FILLER
6.4.1 | 0 -    | -0         |   use empty #0 as DATA0
6.4.2 | 0 -1   | -01        |   use empty #3 as DATA1
6.4.3 | 0--1   | -01-       |   block #1 already marked as FILLER
6.4.4 | 0-21   | -01-2      |   overwrite FILLER at #2 with DATA2
6.5   | *-21   | -01-2*     |  conflict at #0 with DATA0, rewind to 1
6.5.1 | - -    | --         |   mark #0 as FILLER
6.5.2 | - -0   | --0        |   use empty #3 as DATA0
6.5.3 | ---0   | --0-       |   block #1 already marked as FILLER
6.5.4 | --10   | --0-1      |   overwrite FILLER at #2 with DATA1
6.5.5 | 2-10   | --0-12     |   overwrite FILLER at #0 with DATA2
6.6   | 2310   | --0-123    |   overwrite FILLER at #1 with DATA3
7     | 2310 4 | --0-1234   | use empty #5 as DATA4
ETC   | ETC    | ETC        | ETC


How can we be sure that te numbering of a data block is definitive?

Well, just look at maximum backtrack the algorithm produces, if we are far away
from the maximum backtrack, we assume everyhting is ok. If we would continue
with the above example, all blocks will eventually be labeled as FILLER.

[TODO: find criterium for definitive numbering]

Maximum backtrack (in situations where not all blocks will be marked as FILLER
eventually) is about equal to two times NO_BLOCKS for a run of 300000 blocks.
So we wait 5 times NO_BLOCKS to be sure.

How to restart the RNG after close/open or resize?

Generate a random sequence, and assign roles according to the algorithm. Then permute the numbers
so that the new sequence is consistent with the state of the disk.

An example:

Suppose the disk is at sequence 39:

(the numbers here are sequence numbers, every block has
a sequence number, in step n of the writing process, the block
with sequence number n is written)

39: 0/35~ 1/39- 2/34~ 3/38- 4/37D 5/29~ 6/32~ 7/36D

This means that:

block 0 OLD data block established at seqno 35
block 1 FILLER block established at seqno 39
block 2 OLD data block established at seqno 34
block 3 FILLER block established at seqno 38
block 4 CURRENT data block established at seqno 37
block 5 OLD data block established at seqno 29
block 6 OLD data block established at seqno 32
block 7 CURRENT data block established at seqno 36

Now we want to sync the RNG to this harddisk state.
Assume the RNG generated  464047060734627375331140...
our algorithm gives       -D-DDD-DDDDDDD-DDD-D-DDD...

Interpret RNG output as symbols using this translation
	01234567
	stuvwxyz

Note that this translation does not affect the roles assigned to the blocks
by the algorithm. We get: wywswzsyszvwyuzvzxvvttws...

This is the reconstructed timeline based on the pattern on disk
and our new data.

data block and prospective datablock turned to FILLER blocks ages,
age is 0, 1 or '~' (meaning OLD), '.' overwritten or ' ' empty

  3333333344444444
  2345678901234567
  ~.~~DD!!-D-DDD-D
  6?207431wywswzsy
  --old--><--new--
0 ...01~~~
1 .......0
2 ..01~~~~
3 ......01
4 .....000
5 ~~~~~~~~
6 ~~~~~~~~
7 ....0111

' ' is an empty block on disk (MAY overwrite) (not shown in the example)
'~' is an old data block on disk (MAY overwrite)
'.' is a block that is not on disk anymore (ignore)
'D' is a current data block (MUST NOT overwrite until it's obsolete)
'!' is an old FILLER block (MUST overwrite

Now we must choose the values of stuvwxyz based on the constraints. Since each data block
encodes the disk block that obsoletes it, we already know the value of y and s.

Furthermore:

- w or y must be equal to 3 to obsolete disk block 3 in time
- w, y or s must be equal to 1 to obsolete disk block 1 in time

